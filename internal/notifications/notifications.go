package notifications

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"net/http"
	"sort"
	"strings"
	"time"
	"tournament-bot/internal/db"
)

const (
	BotToken   = "7012505888:AAEtQoe-AwaoNoC5OPUQaQ6jAqNHKYAKcQk"
	ChannelID  = "@test_bot_botsadfasd"
	TwitchLink = "https://www.twitch.tv/your_channel"
)

func SendTournamentStartMessage(tournament *db.Tournament) error {
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
	var participantsWithTeams []string
	for _, participant := range tournament.Participants {
		team := tournament.ParticipantTeams[participant]
		participantWithTeam := fmt.Sprintf("<b>%s</b> (%s)", participant, team)
		participantsWithTeams = append(participantsWithTeams, participantWithTeam)
	}
	participants := strings.Join(participantsWithTeams, "\n")

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML
	message := fmt.Sprintf(`
<b>üèÜ –ù–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä –Ω–∞—á–∞–ª—Å—è!</b>

<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ:</b>
<i>–ù–∞–∑–≤–∞–Ω–∏–µ:</i> %s
<i>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</i> %s

<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b>
%s

<b>üî• –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞!</b>
–°–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à—É —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –Ω–∞ Twitch: <a href="%s">%s</a> üì∫

<b>–î–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –±–∏—Ç–≤–∞! ‚öΩüí™</b>
`, tournament.Name, tournament.TeamCategory, participants, TwitchLink, TwitchLink)

	// –°–æ–∑–¥–∞–µ–º MessageConfig –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
	msg := tgbotapi.NewMessageToChannel(ChannelID, message)
	msg.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
	bot, err := tgbotapi.NewBotAPI(BotToken)
	if err != nil {
		return fmt.Errorf("failed to create bot: %v", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
	bot.Debug = true
	bot.Client = &http.Client{Timeout: 30 * time.Second}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	_, err = bot.Send(msg)
	if err != nil {
		return fmt.Errorf("failed to send tournament start message: %v", err)
	}

	return nil
}

func SendMatchResultMessage(tournament *db.Tournament, match *db.Match) error {
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–∞—Ç—á–∞
	message := fmt.Sprintf(`
<b>‚öΩ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–∞:</b>
<b>%s</b> %d - %d <b>%s</b>

<b>üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞:</b>
`, match.Team1, match.Score1, match.Score2, match.Team2)

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
	standings := tournament.Standings
	sort.Slice(standings, func(i, j int) bool {
		if standings[i].Points != standings[j].Points {
			return standings[i].Points > standings[j].Points
		}
		return standings[i].GoalsDifference > standings[j].GoalsDifference
	})

	tableHeader := "<pre>–ü–æ–∑. –ö–æ–º–∞–Ω–¥–∞            –ò   –í   –ù   –ü   –ì–ó  –ì–ü  –†–ì  –û—á–∫–∏</pre>"
	tableLines := []string{tableHeader}

	for i, standing := range standings {
		team := standing.Team
		played := standing.Played
		won := standing.Won
		drawn := standing.Drawn
		lost := standing.Lost
		goalsFor := standing.GoalsFor
		goalsAgainst := standing.GoalsAgainst
		goalDifference := standing.GoalsDifference
		points := standing.Points

		line := fmt.Sprintf("<pre>%2d.  %-15s %4d %3d %3d %3d %3d %3d %+3d %4d</pre>", i+1, team, played, won, drawn, lost, goalsFor, goalsAgainst, goalDifference, points)
		tableLines = append(tableLines, line)
	}

	table := strings.Join(tableLines, "\n")
	message += table

	// –°–æ–∑–¥–∞–µ–º MessageConfig –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
	msg := tgbotapi.NewMessageToChannel(ChannelID, message)
	msg.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
	bot, err := tgbotapi.NewBotAPI(BotToken)
	if err != nil {
		return fmt.Errorf("failed to create bot: %v", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
	bot.Debug = true
	bot.Client = &http.Client{Timeout: 30 * time.Second}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	_, err = bot.Send(msg)
	if err != nil {
		return fmt.Errorf("failed to send match result message: %v", err)
	}

	return nil
}

func SendPlayoffMatchResultMessage(tournament *db.Tournament, match *db.Match) error {
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–∞—Ç—á–∞ –ø–ª–µ–π-–æ—Ñ—Ñ
	message := fmt.Sprintf(`
<b>‚öΩ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–∞ –ø–ª–µ–π-–æ—Ñ—Ñ:</b>
<b>%s</b> %d - %d <b>%s</b>
`, match.Team1, match.Score1, match.Score2, match.Team2)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–¥–∏—é –ø–ª–µ–π-–æ—Ñ—Ñ
	switch tournament.Playoff.CurrentStage {
	case "quarter":
		// –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —á–µ—Ç–≤–µ—Ä—Ç—å—Ñ–∏–Ω–∞–ª–∞
		message += fmt.Sprintf(`
<b>üèÜ –ù–∞—á–∞–ª—Å—è —á–µ—Ç–≤–µ—Ä—Ç—å—Ñ–∏–Ω–∞–ª —Ç—É—Ä–Ω–∏—Ä–∞!</b>
–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ –º–∞—Ç—á–∏ –ø–ª–µ–π-–æ—Ñ—Ñ! üî•
–°–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à—É —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –Ω–∞ Twitch: <a href="%s">%s</a> üì∫
`, TwitchLink, TwitchLink)
	case "semi":
		// –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–ª—É—Ñ–∏–Ω–∞–ª–∞
		message += fmt.Sprintf(`
<b>üèÜ –ù–∞—á–∞–ª—Å—è –ø–æ–ª—É—Ñ–∏–Ω–∞–ª —Ç—É—Ä–Ω–∏—Ä–∞!</b>
–ë–æ—Ä—å–±–∞ –Ω–∞–∫–∞–ª—è–µ—Ç—Å—è! –ö—Ç–æ –∂–µ –≤—ã–π–¥–µ—Ç –≤ —Ñ–∏–Ω–∞–ª? ü§î
–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —Ä–µ—à–∞—é—â–∏–µ –º–∞—Ç—á–∏ –Ω–∞ –Ω–∞—à–µ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ Twitch: <a href="%s">%s</a> üì∫
`, TwitchLink, TwitchLink)
	case "final":
		// –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ñ–∏–Ω–∞–ª–∞
		message += fmt.Sprintf(`
<b>üèÜ –ù–∞—á–∞–ª—Å—è —Ñ–∏–Ω–∞–ª —Ç—É—Ä–Ω–∏—Ä–∞!</b>
–ö—Ç–æ —Å—Ç–∞–Ω–µ—Ç —á–µ–º–ø–∏–æ–Ω–æ–º? –£–∑–Ω–∞–µ–º —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ! ü•á
–°–º–æ—Ç—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç—á –Ω–∞ –Ω–∞—à–µ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ Twitch: <a href="%s">%s</a> üì∫
`, TwitchLink, TwitchLink)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ—Ç–∫—É –ø–ª–µ–π-–æ—Ñ—Ñ
	bracket := "<pre>\n"
	bracket += "–ß–µ—Ç–≤–µ—Ä—Ç—å—Ñ–∏–Ω–∞–ª:\n"
	for _, match := range tournament.Playoff.QuarterFinals {
		if match.Counted {
			bracket += fmt.Sprintf("%s %d - %d %s\n", match.Team1, match.Score1, match.Score2, match.Team2)
		} else {
			bracket += fmt.Sprintf("%s - %s\n", match.Team1, match.Team2)
		}
	}
	bracket += "\n–ü–æ–ª—É—Ñ–∏–Ω–∞–ª:\n"
	for _, match := range tournament.Playoff.SemiFinals {
		if match.Counted {
			bracket += fmt.Sprintf("%s %d - %d %s\n", match.Team1, match.Score1, match.Score2, match.Team2)
		} else {
			bracket += fmt.Sprintf("%s - %s\n", match.Team1, match.Team2)
		}
	}
	bracket += "\n–§–∏–Ω–∞–ª:\n"
	if tournament.Playoff.Final != nil {
		if tournament.Playoff.Final.Counted {
			bracket += fmt.Sprintf("%s %d - %d %s\n", tournament.Playoff.Final.Team1, tournament.Playoff.Final.Score1, tournament.Playoff.Final.Score2, tournament.Playoff.Final.Team2)
		} else {
			bracket += fmt.Sprintf("%s - %s\n", tournament.Playoff.Final.Team1, tournament.Playoff.Final.Team2)
		}
	}
	bracket += "</pre>"

	message += fmt.Sprintf(`
<b>üèÜ –°–µ—Ç–∫–∞ –ø–ª–µ–π-–æ—Ñ—Ñ:</b>
%s
`, bracket)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞
	if tournament.Playoff.Winner != "" {
		// –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞-–ø–æ–±–µ–¥–∏—Ç–µ–ª—è
		winnerName := ""
		for player, team := range tournament.ParticipantTeams {
			if team == tournament.Playoff.Winner {
				winnerName = player
				break
			}
		}

		// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞
		message += fmt.Sprintf(`
<b>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞: %s üéâ</b>
–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º <b>%s</b> —Å –ø–æ–±–µ–¥–æ–π –≤ —Ç—É—Ä–Ω–∏—Ä–µ!
`, winnerName, winnerName)
	}

	// –°–æ–∑–¥–∞–µ–º MessageConfig –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
	msg := tgbotapi.NewMessageToChannel(ChannelID, message)
	msg.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
	bot, err := tgbotapi.NewBotAPI(BotToken)
	if err != nil {
		return fmt.Errorf("failed to create bot: %v", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
	bot.Debug = true
	bot.Client = &http.Client{Timeout: 30 * time.Second}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	_, err = bot.Send(msg)
	if err != nil {
		return fmt.Errorf("failed to send playoff match result message: %v", err)
	}

	return nil
}
