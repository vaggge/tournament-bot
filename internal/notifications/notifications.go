package notifications

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"net/http"
	"sort"
	"strings"
	"time"
	"tournament-bot/internal/db"
)

const (
	BotToken   = "7012505888:AAEtQoe-AwaoNoC5OPUQaQ6jAqNHKYAKcQk"
	ChannelID  = "@test_bot_botsadfasd"
	TwitchLink = "https://www.twitch.tv/your_channel"
)

func SendTournamentStartMessage(tournament *db.Tournament) error {
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
	var participantsWithTeams []string
	for _, participant := range tournament.Participants {
		team := tournament.ParticipantTeams[participant]
		participantWithTeam := fmt.Sprintf("<b>%s</b> (%s)", participant, team)
		participantsWithTeams = append(participantsWithTeams, participantWithTeam)
	}
	participants := strings.Join(participantsWithTeams, "\n")

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML
	message := fmt.Sprintf(`
<b>üèÜ –ù–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä –Ω–∞—á–∞–ª—Å—è!</b>

<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ:</b>
<i>–ù–∞–∑–≤–∞–Ω–∏–µ:</i> %s
<i>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</i> %s

<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b>
%s

<b>üî• –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞!</b>
–°–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à—É —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –Ω–∞ Twitch: <a href="%s">%s</a> üì∫

<b>–î–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –±–∏—Ç–≤–∞! ‚öΩüí™</b>
`, tournament.Name, tournament.TeamCategory, participants, TwitchLink, TwitchLink)

	// –°–æ–∑–¥–∞–µ–º MessageConfig –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
	msg := tgbotapi.NewMessageToChannel(ChannelID, message)
	msg.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
	bot, err := tgbotapi.NewBotAPI(BotToken)
	if err != nil {
		return fmt.Errorf("failed to create bot: %v", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
	bot.Debug = true
	bot.Client = &http.Client{Timeout: 30 * time.Second}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	_, err = bot.Send(msg)
	if err != nil {
		return fmt.Errorf("failed to send tournament start message: %v", err)
	}

	return nil
}

func SendMatchResultMessage(tournament *db.Tournament, match *db.Match) error {
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–∞—Ç—á–∞
	message := fmt.Sprintf(`
<b>‚öΩ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–∞:</b>
<b>%s</b> %d - %d <b>%s</b>

<b>üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞:</b>
`, match.Team1, match.Score1, match.Score2, match.Team2)

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
	standings := tournament.Standings
	sort.Slice(standings, func(i, j int) bool {
		if standings[i].Points != standings[j].Points {
			return standings[i].Points > standings[j].Points
		}
		return standings[i].GoalsDifference > standings[j].GoalsDifference
	})

	tableHeader := "<pre>–ü–æ–∑. –ö–æ–º–∞–Ω–¥–∞ (–£—á–∞—Å—Ç–Ω–∏–∫)     –ò   –í   –ù   –ü   –ì–ó  –ì–ü  –†–ì  –û—á–∫–∏</pre>"
	tableLines := []string{tableHeader}

	for i, standing := range standings {
		team := standing.Team
		played := standing.Played
		won := standing.Won
		drawn := standing.Drawn
		lost := standing.Lost
		goalsFor := standing.GoalsFor
		goalsAgainst := standing.GoalsAgainst
		goalDifference := standing.GoalsDifference
		points := standing.Points

		// –ü–æ–ª—É—á–∞–µ–º –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã
		var participant string
		for p, t := range tournament.ParticipantTeams {
			if t == team {
				participant = p
				break
			}
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –∏–º–µ–Ω–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
		teamLine := fmt.Sprintf("<b>%s</b> (%s)", team, participant)

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
		var positionSymbol string
		switch i {
		case 0:
			positionSymbol = "ü•á"
		case 1:
			positionSymbol = "ü•à"
		case 2:
			positionSymbol = "ü•â"
		default:
			positionSymbol = " "
		}

		line := fmt.Sprintf("<pre>%s%2d. %-23s %2d %2d %2d %2d %3d %3d %+3d %4d</pre>", positionSymbol, i+1, teamLine, played, won, drawn, lost, goalsFor, goalsAgainst, goalDifference, points)
		tableLines = append(tableLines, line)
	}

	table := strings.Join(tableLines, "\n")
	message += table

	// –°–æ–∑–¥–∞–µ–º MessageConfig –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
	msg := tgbotapi.NewMessageToChannel(ChannelID, message)
	msg.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
	bot, err := tgbotapi.NewBotAPI(BotToken)
	if err != nil {
		return fmt.Errorf("failed to create bot: %v", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
	bot.Debug = true
	bot.Client = &http.Client{Timeout: 30 * time.Second}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	_, err = bot.Send(msg)
	if err != nil {
		return fmt.Errorf("failed to send match result message: %v", err)
	}

	return nil
}

func SendPlayoffStartMessage(tournament *db.Tournament) error {
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø–ª–µ–π-–æ—Ñ—Ñ
	message := fmt.Sprintf("<b>üèÜ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–ª–µ–π-–æ—Ñ—Ñ —Ç—É—Ä–Ω–∏—Ä–∞ %s!</b>\n\n", tournament.Name)
	message += "–ö–æ–º–∞–Ω–¥—ã –ø—Ä–æ—à–ª–∏ –≥—Ä—É–ø–ø–æ–≤–æ–π —ç—Ç–∞–ø –∏ –≥–æ—Ç–æ–≤—ã —Å—Ä–∞–∑–∏—Ç—å—Å—è –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö –º–∞—Ç—á–∞—Ö –ø–ª–µ–π-–æ—Ñ—Ñ. –ö—Ç–æ —Å—Ç–∞–Ω–µ—Ç —á–µ–º–ø–∏–æ–Ω–æ–º? ü§î\n\n"
	message += fmt.Sprintf("–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞! –°–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à—É —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –Ω–∞ Twitch: <a href=\"%s\">%s</a> üì∫\n\n", TwitchLink, TwitchLink)
	message += "<b>–°–µ—Ç–∫–∞ –ø–ª–µ–π-–æ—Ñ—Ñ:</b>\n"

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ—Ç–∫—É –ø–ª–µ–π-–æ—Ñ—Ñ
	bracket := "<pre>\n"
	bracket += "–ß–µ—Ç–≤–µ—Ä—Ç—å—Ñ–∏–Ω–∞–ª:\n"
	for _, match := range tournament.Playoff.QuarterFinals {
		bracket += fmt.Sprintf("%s - %s\n", match.Team1, match.Team2)
	}
	bracket += "\n–ü–æ–ª—É—Ñ–∏–Ω–∞–ª:\n"
	if len(tournament.Playoff.SemiFinals) > 0 {
		bracket += fmt.Sprintf("%s - ?\n", tournament.Playoff.SemiFinals[0].Team1)
	}
	bracket += "\n–§–∏–Ω–∞–ª:\n"
	if tournament.Playoff.Final != nil {
		bracket += fmt.Sprintf("%s - ?\n", tournament.Playoff.Final.Team1)
	} else {
		bracket += "?\n"
	}
	bracket += "</pre>"

	message += bracket

	// –°–æ–∑–¥–∞–µ–º MessageConfig –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
	msg := tgbotapi.NewMessageToChannel(ChannelID, message)
	msg.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
	bot, err := tgbotapi.NewBotAPI(BotToken)
	if err != nil {
		return fmt.Errorf("failed to create bot: %v", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
	bot.Debug = true
	bot.Client = &http.Client{Timeout: 30 * time.Second}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	_, err = bot.Send(msg)
	if err != nil {
		return fmt.Errorf("failed to send playoff start message: %v", err)
	}

	return nil
}

func SendPlayoffMatchResultMessage(tournament *db.Tournament, currentStage string, match *db.Match) error {
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–∞—Ç—á–∞ –ø–ª–µ–π-–æ—Ñ—Ñ
	message := fmt.Sprintf("<b>‚öΩ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–∞ %s:</b>\n", GetCurrentStageName(currentStage))

	var resultString string
	if match.Penalties {
		resultString = fmt.Sprintf("<b>%s</b> %d:%d (%d:%d) <b>%s</b> (–ø–æ –ø–µ–Ω–∞–ª—å—Ç–∏)",
			match.Team1, match.Score1, match.Score2,
			match.PenaltyScore1, match.PenaltyScore2, match.Team2)
	} else if match.ExtraTime {
		resultString = fmt.Sprintf("<b>%s</b> %d:%d <b>%s</b> (–ø–æ—Å–ª–µ –æ–≤–µ—Ä—Ç–∞–π–º–∞)",
			match.Team1, match.Score1, match.Score2, match.Team2)
	} else {
		resultString = fmt.Sprintf("<b>%s</b> %d:%d <b>%s</b>",
			match.Team1, match.Score1, match.Score2, match.Team2)
	}

	message += resultString + "\n\n"

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ—Ç–∫—É –ø–ª–µ–π-–æ—Ñ—Ñ
	message += "<b>üèÜ –°–µ—Ç–∫–∞ –ø–ª–µ–π-–æ—Ñ—Ñ:</b>\n"
	bracket := "<pre>\n"
	bracket += "–ß–µ—Ç–≤–µ—Ä—Ç—å—Ñ–∏–Ω–∞–ª:\n"
	for _, match := range tournament.Playoff.QuarterFinals {
		team1Participant := getParticipantByTeam(tournament.ParticipantTeams, match.Team1)
		team2Participant := getParticipantByTeam(tournament.ParticipantTeams, match.Team2)
		if match.Counted {
			if match.Penalties {
				bracket += fmt.Sprintf("%s (%s) %d:%d (%d:%d) %s (%s) (–ø–µ–Ω.)\n",
					match.Team1, team1Participant, match.Score1, match.Score2,
					match.PenaltyScore1, match.PenaltyScore2, match.Team2, team2Participant)
			} else if match.ExtraTime {
				bracket += fmt.Sprintf("%s (%s) %d:%d %s (%s) (–æ–≤–µ—Ä—Ç–∞–π–º)\n",
					match.Team1, team1Participant, match.Score1, match.Score2, match.Team2, team2Participant)
			} else {
				bracket += fmt.Sprintf("%s (%s) %d:%d %s (%s)\n",
					match.Team1, team1Participant, match.Score1, match.Score2, match.Team2, team2Participant)
			}
		} else {
			bracket += fmt.Sprintf("%s (%s) - %s (%s)\n", match.Team1, team1Participant, match.Team2, team2Participant)
		}
	}
	bracket += "\n–ü–æ–ª—É—Ñ–∏–Ω–∞–ª:\n"
	for _, match := range tournament.Playoff.SemiFinals {
		team1Participant := getParticipantByTeam(tournament.ParticipantTeams, match.Team1)
		team2Participant := getParticipantByTeam(tournament.ParticipantTeams, match.Team2)
		if match.Counted {
			if match.Penalties {
				bracket += fmt.Sprintf("%s (%s) %d:%d (%d:%d) %s (%s) (–ø–µ–Ω.)\n",
					match.Team1, team1Participant, match.Score1, match.Score2,
					match.PenaltyScore1, match.PenaltyScore2, match.Team2, team2Participant)
			} else if match.ExtraTime {
				bracket += fmt.Sprintf("%s (%s) %d:%d %s (%s) (–æ–≤–µ—Ä—Ç–∞–π–º)\n",
					match.Team1, team1Participant, match.Score1, match.Score2, match.Team2, team2Participant)
			} else {
				bracket += fmt.Sprintf("%s (%s) %d:%d %s (%s)\n",
					match.Team1, team1Participant, match.Score1, match.Score2, match.Team2, team2Participant)
			}
		} else {
			bracket += fmt.Sprintf("%s (%s) - %s (%s)\n", match.Team1, team1Participant, match.Team2, team2Participant)
		}
	}
	bracket += "\n–§–∏–Ω–∞–ª:\n"
	if tournament.Playoff.Final != nil {
		team1Participant := getParticipantByTeam(tournament.ParticipantTeams, tournament.Playoff.Final.Team1)
		team2Participant := getParticipantByTeam(tournament.ParticipantTeams, tournament.Playoff.Final.Team2)
		if tournament.Playoff.Final.Counted {
			if tournament.Playoff.Final.Penalties {
				bracket += fmt.Sprintf("%s (%s) %d:%d (%d:%d) %s (%s) (–ø–µ–Ω.)\n",
					tournament.Playoff.Final.Team1, team1Participant,
					tournament.Playoff.Final.Score1, tournament.Playoff.Final.Score2,
					tournament.Playoff.Final.PenaltyScore1, tournament.Playoff.Final.PenaltyScore2,
					tournament.Playoff.Final.Team2, team2Participant)
			} else if tournament.Playoff.Final.ExtraTime {
				bracket += fmt.Sprintf("%s (%s) %d:%d %s (%s) (–æ–≤–µ—Ä—Ç–∞–π–º)\n",
					tournament.Playoff.Final.Team1, team1Participant,
					tournament.Playoff.Final.Score1, tournament.Playoff.Final.Score2,
					tournament.Playoff.Final.Team2, team2Participant)
			} else {
				bracket += fmt.Sprintf("%s (%s) %d:%d %s (%s)\n",
					tournament.Playoff.Final.Team1, team1Participant,
					tournament.Playoff.Final.Score1, tournament.Playoff.Final.Score2,
					tournament.Playoff.Final.Team2, team2Participant)
			}
		} else {
			bracket += fmt.Sprintf("%s (%s) - %s (%s)\n",
				tournament.Playoff.Final.Team1, team1Participant,
				tournament.Playoff.Final.Team2, team2Participant)
		}
	}
	bracket += "</pre>"

	message += bracket + "\n"

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞
	if tournament.Playoff.Winner != "" {
		// –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞-–ø–æ–±–µ–¥–∏—Ç–µ–ª—è
		winnerName := getParticipantByTeam(tournament.ParticipantTeams, tournament.Playoff.Winner)

		// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞
		message += fmt.Sprintf("<b>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞: %s üéâ</b>\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º <b>%s</b> —Å –ø–æ–±–µ–¥–æ–π –≤ —Ç—É—Ä–Ω–∏—Ä–µ!\n", winnerName, winnerName)

		// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞
		message += "\n–¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏ –∑—Ä–∏—Ç–µ–ª—è–º! üëè\n"
	}

	// –°–æ–∑–¥–∞–µ–º MessageConfig –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
	msg := tgbotapi.NewMessageToChannel(ChannelID, message)
	msg.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
	bot, err := tgbotapi.NewBotAPI(BotToken)
	if err != nil {
		return fmt.Errorf("failed to create bot: %v", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
	bot.Debug = true
	bot.Client = &http.Client{Timeout: 30 * time.Second}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	_, err = bot.Send(msg)
	if err != nil {
		return fmt.Errorf("failed to send playoff match result message: %v", err)
	}

	return nil
}

func getParticipantByTeam(participantTeams map[string]string, teamName string) string {
	for participant, team := range participantTeams {
		if team == teamName {
			return participant
		}
	}
	return "Unknown"
}

func GetCurrentStageName(stage string) string {
	switch stage {
	case "quarter":
		return "—á–µ—Ç–≤–µ—Ä—Ç—å—Ñ–∏–Ω–∞–ª–∞"
	case "semi":
		return "–ø–æ–ª—É—Ñ–∏–Ω–∞–ª–∞"
	case "final":
		return "—Ñ–∏–Ω–∞–ª–∞"
	default:
		return ""
	}
}

func SendSeasonRatingMessage() error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	participants, err := db.GetAllParticipantsWithStats()
	if err != nil {
		return fmt.Errorf("failed to get participants: %v", err)
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—á–∫–æ–≤ –∏ —Ä–∞–∑–Ω–∏—Ü–µ –ø–æ–±–µ–¥ –∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–π
	sort.Slice(participants, func(i, j int) bool {
		if participants[i].Stats.TotalPoints == participants[j].Stats.TotalPoints {
			return participants[i].Stats.Wins-participants[i].Stats.Losses > participants[j].Stats.Wins-participants[j].Stats.Losses
		}
		return participants[i].Stats.TotalPoints > participants[j].Stats.TotalPoints
	})

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü–µ–π —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å–µ–∑–æ–Ω–∞
	message := "<b>üèÜ –û–±—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å–µ–∑–æ–Ω–∞:</b>\n\n"
	message += "<pre>–ü–æ–∑. –£—á–∞—Å—Ç–Ω–∏–∫               –û—á–∫–∏  –¢—É—Ä–Ω–∏—Ä—ã  –ü–æ–±–µ–¥  –ù–∏—á—å–∏—Ö  –ü–æ—Ä–∞–∂.  –ì–æ–ª—ã</pre>\n"
	message += "<pre>------------------------------------------------------------------------------</pre>\n"

	for i, participant := range participants {
		stats := participant.Stats
		line := fmt.Sprintf(
			"<pre>%2d.  %-20s  %4d    %3d     %3d    %3d     %3d    %3d - %3d</pre>\n",
			i+1, participant.Name, stats.TotalPoints, stats.TournamentsPlayed,
			stats.Wins, stats.Draws, stats.Losses, stats.GoalsScored, stats.GoalsConceded,
		)
		message += line
	}

	// –°–æ–∑–¥–∞–µ–º MessageConfig –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
	msg := tgbotapi.NewMessageToChannel(ChannelID, message)
	msg.ParseMode = "HTML"

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
	bot, err := tgbotapi.NewBotAPI(BotToken)
	if err != nil {
		return fmt.Errorf("failed to create bot: %v", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
	bot.Debug = true
	bot.Client = &http.Client{Timeout: 30 * time.Second}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	_, err = bot.Send(msg)
	if err != nil {
		return fmt.Errorf("failed to send season rating message: %v", err)
	}

	return nil
}
